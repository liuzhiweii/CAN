
option optimize_for = LITE_RUNTIME;

package scheduler;



message ConfigContent {

	message BaseConfig {
		required int32 route = 1;
		required int32 sleeptime = 2;
		required uint32 beaconId = 3;
		required int32 parallelTrade = 4;
	}
	
	
    message RfConfig {
		required int32 rfsn = 1;
		required bool enable = 2;
		required int32 power = 3;
		required string addr = 4;
    }
   
    message PsamConfig {
		required int32 psamid = 1;
		required bool enable = 2;
		required int32 type = 3;
		required string addr =4;
	}


	required BaseConfig baseConfig = 1;
    repeated RfConfig rfconfig = 2;
    repeated PsamConfig psamconfig = 3;
  }


message sched_request {
  enum RequestType {
    queryConfig = 0;
    setRuningMode = 1;
    queryTradeStat = 2;
    changeConfig = 3;
    queryRuningMode = 4;
    clearTradeStat = 5;
	changeConfigByJson = 6;
  }

  required RequestType type = 1;
  optional bool runingmode = 2;
  optional ConfigContent content= 3;
  optional bytes jsonString = 4;
  
}

message sched_response {
  enum ResponseType {
    queryConfigResponse = 0;
    setRuningModeResponse = 1;
    queryTradeStatResponse = 2;
    changeConfigResponse = 3;
    queryRuningModeResponse = 4;
    clearTradeStatResponse = 5;
	changeConfigByJsonResponse = 6;
  }

  message TradeStat {
    required int32 runTime = 1;
    required int32 tradeNum = 2;
    required int32 successNum = 3 ;
    required int32 failNum = 4;
    required int32 timeoutNum = 5;
    required int32 minTradeTime = 6;
    required int32 maxTradeTime = 7;
    required int32 avgTradeTime = 8;
    repeated uint32 successMacs = 9;
    repeated uint32 failMacs = 10;
    repeated uint32 timeoutMacs = 11;
  }

  required ResponseType type = 1;
  optional ConfigContent content = 2;
  optional bool currentRuningMode = 3;
  optional TradeStat tradeStat = 4;
  optional bytes jsonString = 5;

}

message TagReport {
	enum TradeResult {
		success = 0;
		fail = 1;
		timeout = 2;  
	}
	
	required int32 macid = 1;
	required TradeResult result = 2;
	required int32 tradeTime = 3;
}

message TragReportMessage {
	required int32 tagNumber = 1;
	repeated TagReport reports = 2;
}







